# PROJECT-SPECIFIC PART

---
- name: Create a new EC2 instances for PoC specific purposes
  hosts: localhost
  gather_facts: False
  tasks:
    - name: Create configurator machine
      ec2:
         key_name: "{{ keypair }}"
         group: Blockchain-Fabric
         instance_type: "{{ instance_type}}"
         image: "{{ ami }}"
         wait: true
         region: "{{ region }}"
         count: 1
         instance_tags:
            Name: "{{project_name}}_CONF"
            cluster_id: "{{cluster_id}}"
            project_group: configurator
            project: "{{project_name}}"
         vpc_subnet_id: "{{subnet_id}}"
         assign_public_ip: yes
      register: ec2configurator

    - name: Create business nodes vms
      ec2:
         key_name: "{{ keypair }}"
         group: Blockchain-Fabric
         instance_type: "{{ instance_type}}"
         image: "{{ ami }}"
         wait: true
         region: "{{ region }}"
         count: 2
         instance_tags:
            Name: "{{project_name}}_business_node"
            cluster_id: "{{ cluster_id }}"
            project_group: business_nodes
            project: "{{project_name}}"
         vpc_subnet_id: "{{subnet_id}}"
         assign_public_ip: yes
      register: ec2businessnodes

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        delay: 15
        timeout: 100
        state: started
      with_items: "{{ ec2businessnodes.instances + ec2configurator.instances }}"

- name: Refresh inventory to have the actual one (before install basic stuff)
  hosts: localhost
  tasks:
    - meta: refresh_inventory

- name: Install basic requirements (python, docker)
  hosts: all:!localhost
  gather_facts: False
  tasks:
    - name: check docker-engine installed
      command: dpkg-query -l docker-engine
      register: deb_check
      ignore_errors: True
    - name: Set requirements_installed flag True if docker-engine package installed
      set_fact: requirements_installed=True
      when: ('msg' in deb_check and deb_check.msg.find('FAILURE') == -1) or ('stdout' in deb_check and deb_check.stdout.find('no packages found') == -1)
    - include_role:
        name: ubuntu-ansible-req
      when: not requirements_installed
    - include_role:
        name: ubuntu-docker-engine
      when: not requirements_installed